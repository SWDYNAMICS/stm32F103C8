
stm32F103_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d34  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000e64  08000e64  00010e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e84  08000e84  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000e84  08000e84  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e84  08000e84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e84  08000e84  00010e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e88  08000e88  00010e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000e98  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000e98  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000260a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ce3  00000000  00000000  0002263f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003e8  00000000  00000000  00023328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000340  00000000  00000000  00023710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ed3  00000000  00000000  00023a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006386  00000000  00000000  0003a923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f422  00000000  00000000  00040ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c00cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000cb0  00000000  00000000  000c011c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e4c 	.word	0x08000e4c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	08000e4c 	.word	0x08000e4c

08000170 <apInit>:
#include "ap.h"

void apInit(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

}
 8000174:	bf00      	nop
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <apMain>:

void apMain(void)
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
  while(1)
 8000180:	e7fe      	b.n	8000180 <apMain+0x4>
	...

08000184 <bspInit>:
#include "bsp.h"
void SystemClock_Config(void);


void bspInit(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
	HAL_Init();
 800018a:	f000 f8f9 	bl	8000380 <HAL_Init>
	SystemClock_Config();
 800018e:	f000 f81f 	bl	80001d0 <SystemClock_Config>
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000192:	4b0e      	ldr	r3, [pc, #56]	; (80001cc <bspInit+0x48>)
 8000194:	699b      	ldr	r3, [r3, #24]
 8000196:	4a0d      	ldr	r2, [pc, #52]	; (80001cc <bspInit+0x48>)
 8000198:	f043 0320 	orr.w	r3, r3, #32
 800019c:	6193      	str	r3, [r2, #24]
 800019e:	4b0b      	ldr	r3, [pc, #44]	; (80001cc <bspInit+0x48>)
 80001a0:	699b      	ldr	r3, [r3, #24]
 80001a2:	f003 0320 	and.w	r3, r3, #32
 80001a6:	607b      	str	r3, [r7, #4]
 80001a8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80001aa:	4b08      	ldr	r3, [pc, #32]	; (80001cc <bspInit+0x48>)
 80001ac:	699b      	ldr	r3, [r3, #24]
 80001ae:	4a07      	ldr	r2, [pc, #28]	; (80001cc <bspInit+0x48>)
 80001b0:	f043 0304 	orr.w	r3, r3, #4
 80001b4:	6193      	str	r3, [r2, #24]
 80001b6:	4b05      	ldr	r3, [pc, #20]	; (80001cc <bspInit+0x48>)
 80001b8:	699b      	ldr	r3, [r3, #24]
 80001ba:	f003 0304 	and.w	r3, r3, #4
 80001be:	603b      	str	r3, [r7, #0]
 80001c0:	683b      	ldr	r3, [r7, #0]

}
 80001c2:	bf00      	nop
 80001c4:	3708      	adds	r7, #8
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	40021000 	.word	0x40021000

080001d0 <SystemClock_Config>:




void SystemClock_Config(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b090      	sub	sp, #64	; 0x40
 80001d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d6:	f107 0318 	add.w	r3, r7, #24
 80001da:	2228      	movs	r2, #40	; 0x28
 80001dc:	2100      	movs	r1, #0
 80001de:	4618      	mov	r0, r3
 80001e0:	f000 fe2c 	bl	8000e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
 80001ea:	605a      	str	r2, [r3, #4]
 80001ec:	609a      	str	r2, [r3, #8]
 80001ee:	60da      	str	r2, [r3, #12]
 80001f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f2:	2301      	movs	r3, #1
 80001f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001fc:	2300      	movs	r3, #0
 80001fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000200:	2301      	movs	r3, #1
 8000202:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000204:	2302      	movs	r3, #2
 8000206:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000208:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800020c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800020e:	2300      	movs	r3, #0
 8000210:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000212:	f107 0318 	add.w	r3, r7, #24
 8000216:	4618      	mov	r0, r3
 8000218:	f000 f9f8 	bl	800060c <HAL_RCC_OscConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000222:	f000 f818 	bl	8000256 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000226:	230f      	movs	r3, #15
 8000228:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800022a:	2302      	movs	r3, #2
 800022c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022e:	2300      	movs	r3, #0
 8000230:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f000 fc66 	bl	8000b10 <HAL_RCC_ClockConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800024a:	f000 f804 	bl	8000256 <Error_Handler>
  }
}
 800024e:	bf00      	nop
 8000250:	3740      	adds	r7, #64	; 0x40
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}

08000256 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000256:	b480      	push	{r7}
 8000258:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800025a:	b672      	cpsid	i
}
 800025c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800025e:	e7fe      	b.n	800025e <Error_Handler+0x8>

08000260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000260:	b480      	push	{r7}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000266:	4b15      	ldr	r3, [pc, #84]	; (80002bc <HAL_MspInit+0x5c>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	4a14      	ldr	r2, [pc, #80]	; (80002bc <HAL_MspInit+0x5c>)
 800026c:	f043 0301 	orr.w	r3, r3, #1
 8000270:	6193      	str	r3, [r2, #24]
 8000272:	4b12      	ldr	r3, [pc, #72]	; (80002bc <HAL_MspInit+0x5c>)
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	f003 0301 	and.w	r3, r3, #1
 800027a:	60bb      	str	r3, [r7, #8]
 800027c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800027e:	4b0f      	ldr	r3, [pc, #60]	; (80002bc <HAL_MspInit+0x5c>)
 8000280:	69db      	ldr	r3, [r3, #28]
 8000282:	4a0e      	ldr	r2, [pc, #56]	; (80002bc <HAL_MspInit+0x5c>)
 8000284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000288:	61d3      	str	r3, [r2, #28]
 800028a:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <HAL_MspInit+0x5c>)
 800028c:	69db      	ldr	r3, [r3, #28]
 800028e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000292:	607b      	str	r3, [r7, #4]
 8000294:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000296:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <HAL_MspInit+0x60>)
 8000298:	685b      	ldr	r3, [r3, #4]
 800029a:	60fb      	str	r3, [r7, #12]
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002aa:	60fb      	str	r3, [r7, #12]
 80002ac:	4a04      	ldr	r2, [pc, #16]	; (80002c0 <HAL_MspInit+0x60>)
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002b2:	bf00      	nop
 80002b4:	3714      	adds	r7, #20
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	40021000 	.word	0x40021000
 80002c0:	40010000 	.word	0x40010000

080002c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002c8:	e7fe      	b.n	80002c8 <NMI_Handler+0x4>

080002ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002ca:	b480      	push	{r7}
 80002cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002ce:	e7fe      	b.n	80002ce <HardFault_Handler+0x4>

080002d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002d4:	e7fe      	b.n	80002d4 <MemManage_Handler+0x4>

080002d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002d6:	b480      	push	{r7}
 80002d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002da:	e7fe      	b.n	80002da <BusFault_Handler+0x4>

080002dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002e0:	e7fe      	b.n	80002e0 <UsageFault_Handler+0x4>

080002e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002e2:	b480      	push	{r7}
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002e6:	bf00      	nop
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr

080002ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002ee:	b480      	push	{r7}
 80002f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002f2:	bf00      	nop
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr

080002fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002fa:	b480      	push	{r7}
 80002fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002fe:	bf00      	nop
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr

08000306 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000306:	b580      	push	{r7, lr}
 8000308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800030a:	f000 f87f 	bl	800040c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}

08000312 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000312:	b480      	push	{r7}
 8000314:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
	...

08000320 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000320:	480d      	ldr	r0, [pc, #52]	; (8000358 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000322:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000324:	f7ff fff5 	bl	8000312 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000328:	480c      	ldr	r0, [pc, #48]	; (800035c <LoopForever+0x6>)
  ldr r1, =_edata
 800032a:	490d      	ldr	r1, [pc, #52]	; (8000360 <LoopForever+0xa>)
  ldr r2, =_sidata
 800032c:	4a0d      	ldr	r2, [pc, #52]	; (8000364 <LoopForever+0xe>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000330:	e002      	b.n	8000338 <LoopCopyDataInit>

08000332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000336:	3304      	adds	r3, #4

08000338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800033c:	d3f9      	bcc.n	8000332 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033e:	4a0a      	ldr	r2, [pc, #40]	; (8000368 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000340:	4c0a      	ldr	r4, [pc, #40]	; (800036c <LoopForever+0x16>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000344:	e001      	b.n	800034a <LoopFillZerobss>

08000346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000348:	3204      	adds	r2, #4

0800034a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800034c:	d3fb      	bcc.n	8000346 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800034e:	f000 fd51 	bl	8000df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000352:	f000 fd43 	bl	8000ddc <main>

08000356 <LoopForever>:

LoopForever:
    b LoopForever
 8000356:	e7fe      	b.n	8000356 <LoopForever>
  ldr   r0, =_estack
 8000358:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800035c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000360:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000364:	08000e8c 	.word	0x08000e8c
  ldr r2, =_sbss
 8000368:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800036c:	2000002c 	.word	0x2000002c

08000370 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000370:	e7fe      	b.n	8000370 <ADC1_2_IRQHandler>

08000372 <hwInit>:
 */

#include "hw.h"

void hwInit()
{
 8000372:	b580      	push	{r7, lr}
 8000374:	af00      	add	r7, sp, #0
	bspInit();
 8000376:	f7ff ff05 	bl	8000184 <bspInit>
}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
	...

08000380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <HAL_Init+0x28>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a07      	ldr	r2, [pc, #28]	; (80003a8 <HAL_Init+0x28>)
 800038a:	f043 0310 	orr.w	r3, r3, #16
 800038e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000390:	2003      	movs	r0, #3
 8000392:	f000 f907 	bl	80005a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000396:	200f      	movs	r0, #15
 8000398:	f000 f808 	bl	80003ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800039c:	f7ff ff60 	bl	8000260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003a0:	2300      	movs	r3, #0
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40022000 	.word	0x40022000

080003ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003b4:	4b12      	ldr	r3, [pc, #72]	; (8000400 <HAL_InitTick+0x54>)
 80003b6:	681a      	ldr	r2, [r3, #0]
 80003b8:	4b12      	ldr	r3, [pc, #72]	; (8000404 <HAL_InitTick+0x58>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	4619      	mov	r1, r3
 80003be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80003c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 f911 	bl	80005f2 <HAL_SYSTICK_Config>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80003d6:	2301      	movs	r3, #1
 80003d8:	e00e      	b.n	80003f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2b0f      	cmp	r3, #15
 80003de:	d80a      	bhi.n	80003f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003e0:	2200      	movs	r2, #0
 80003e2:	6879      	ldr	r1, [r7, #4]
 80003e4:	f04f 30ff 	mov.w	r0, #4294967295
 80003e8:	f000 f8e7 	bl	80005ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003ec:	4a06      	ldr	r2, [pc, #24]	; (8000408 <HAL_InitTick+0x5c>)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80003f2:	2300      	movs	r3, #0
 80003f4:	e000      	b.n	80003f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80003f6:	2301      	movs	r3, #1
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3708      	adds	r7, #8
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000000 	.word	0x20000000
 8000404:	20000008 	.word	0x20000008
 8000408:	20000004 	.word	0x20000004

0800040c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <HAL_IncTick+0x1c>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	461a      	mov	r2, r3
 8000416:	4b05      	ldr	r3, [pc, #20]	; (800042c <HAL_IncTick+0x20>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4413      	add	r3, r2
 800041c:	4a03      	ldr	r2, [pc, #12]	; (800042c <HAL_IncTick+0x20>)
 800041e:	6013      	str	r3, [r2, #0]
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr
 8000428:	20000008 	.word	0x20000008
 800042c:	20000028 	.word	0x20000028

08000430 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  return uwTick;
 8000434:	4b02      	ldr	r3, [pc, #8]	; (8000440 <HAL_GetTick+0x10>)
 8000436:	681b      	ldr	r3, [r3, #0]
}
 8000438:	4618      	mov	r0, r3
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr
 8000440:	20000028 	.word	0x20000028

08000444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000444:	b480      	push	{r7}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	f003 0307 	and.w	r3, r3, #7
 8000452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000454:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <__NVIC_SetPriorityGrouping+0x44>)
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800045a:	68ba      	ldr	r2, [r7, #8]
 800045c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000460:	4013      	ands	r3, r2
 8000462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800046c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000476:	4a04      	ldr	r2, [pc, #16]	; (8000488 <__NVIC_SetPriorityGrouping+0x44>)
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	60d3      	str	r3, [r2, #12]
}
 800047c:	bf00      	nop
 800047e:	3714      	adds	r7, #20
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	e000ed00 	.word	0xe000ed00

0800048c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000492:	68db      	ldr	r3, [r3, #12]
 8000494:	0a1b      	lsrs	r3, r3, #8
 8000496:	f003 0307 	and.w	r3, r3, #7
}
 800049a:	4618      	mov	r0, r3
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	e000ed00 	.word	0xe000ed00

080004a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	6039      	str	r1, [r7, #0]
 80004b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	db0a      	blt.n	80004d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	b2da      	uxtb	r2, r3
 80004c0:	490c      	ldr	r1, [pc, #48]	; (80004f4 <__NVIC_SetPriority+0x4c>)
 80004c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c6:	0112      	lsls	r2, r2, #4
 80004c8:	b2d2      	uxtb	r2, r2
 80004ca:	440b      	add	r3, r1
 80004cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004d0:	e00a      	b.n	80004e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	4908      	ldr	r1, [pc, #32]	; (80004f8 <__NVIC_SetPriority+0x50>)
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	f003 030f 	and.w	r3, r3, #15
 80004de:	3b04      	subs	r3, #4
 80004e0:	0112      	lsls	r2, r2, #4
 80004e2:	b2d2      	uxtb	r2, r2
 80004e4:	440b      	add	r3, r1
 80004e6:	761a      	strb	r2, [r3, #24]
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	e000e100 	.word	0xe000e100
 80004f8:	e000ed00 	.word	0xe000ed00

080004fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b089      	sub	sp, #36	; 0x24
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	f003 0307 	and.w	r3, r3, #7
 800050e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000510:	69fb      	ldr	r3, [r7, #28]
 8000512:	f1c3 0307 	rsb	r3, r3, #7
 8000516:	2b04      	cmp	r3, #4
 8000518:	bf28      	it	cs
 800051a:	2304      	movcs	r3, #4
 800051c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800051e:	69fb      	ldr	r3, [r7, #28]
 8000520:	3304      	adds	r3, #4
 8000522:	2b06      	cmp	r3, #6
 8000524:	d902      	bls.n	800052c <NVIC_EncodePriority+0x30>
 8000526:	69fb      	ldr	r3, [r7, #28]
 8000528:	3b03      	subs	r3, #3
 800052a:	e000      	b.n	800052e <NVIC_EncodePriority+0x32>
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000530:	f04f 32ff 	mov.w	r2, #4294967295
 8000534:	69bb      	ldr	r3, [r7, #24]
 8000536:	fa02 f303 	lsl.w	r3, r2, r3
 800053a:	43da      	mvns	r2, r3
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	401a      	ands	r2, r3
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000544:	f04f 31ff 	mov.w	r1, #4294967295
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	fa01 f303 	lsl.w	r3, r1, r3
 800054e:	43d9      	mvns	r1, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000554:	4313      	orrs	r3, r2
         );
}
 8000556:	4618      	mov	r0, r3
 8000558:	3724      	adds	r7, #36	; 0x24
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr

08000560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	3b01      	subs	r3, #1
 800056c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000570:	d301      	bcc.n	8000576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000572:	2301      	movs	r3, #1
 8000574:	e00f      	b.n	8000596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000576:	4a0a      	ldr	r2, [pc, #40]	; (80005a0 <SysTick_Config+0x40>)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	3b01      	subs	r3, #1
 800057c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800057e:	210f      	movs	r1, #15
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f7ff ff90 	bl	80004a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <SysTick_Config+0x40>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800058e:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <SysTick_Config+0x40>)
 8000590:	2207      	movs	r2, #7
 8000592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000594:	2300      	movs	r3, #0
}
 8000596:	4618      	mov	r0, r3
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	e000e010 	.word	0xe000e010

080005a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f7ff ff49 	bl	8000444 <__NVIC_SetPriorityGrouping>
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b086      	sub	sp, #24
 80005be:	af00      	add	r7, sp, #0
 80005c0:	4603      	mov	r3, r0
 80005c2:	60b9      	str	r1, [r7, #8]
 80005c4:	607a      	str	r2, [r7, #4]
 80005c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80005cc:	f7ff ff5e 	bl	800048c <__NVIC_GetPriorityGrouping>
 80005d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	68b9      	ldr	r1, [r7, #8]
 80005d6:	6978      	ldr	r0, [r7, #20]
 80005d8:	f7ff ff90 	bl	80004fc <NVIC_EncodePriority>
 80005dc:	4602      	mov	r2, r0
 80005de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005e2:	4611      	mov	r1, r2
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ff5f 	bl	80004a8 <__NVIC_SetPriority>
}
 80005ea:	bf00      	nop
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b082      	sub	sp, #8
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f7ff ffb0 	bl	8000560 <SysTick_Config>
 8000600:	4603      	mov	r3, r0
}
 8000602:	4618      	mov	r0, r3
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d101      	bne.n	800061e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800061a:	2301      	movs	r3, #1
 800061c:	e272      	b.n	8000b04 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	2b00      	cmp	r3, #0
 8000628:	f000 8087 	beq.w	800073a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800062c:	4b92      	ldr	r3, [pc, #584]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	f003 030c 	and.w	r3, r3, #12
 8000634:	2b04      	cmp	r3, #4
 8000636:	d00c      	beq.n	8000652 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000638:	4b8f      	ldr	r3, [pc, #572]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	f003 030c 	and.w	r3, r3, #12
 8000640:	2b08      	cmp	r3, #8
 8000642:	d112      	bne.n	800066a <HAL_RCC_OscConfig+0x5e>
 8000644:	4b8c      	ldr	r3, [pc, #560]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800064c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000650:	d10b      	bne.n	800066a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000652:	4b89      	ldr	r3, [pc, #548]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800065a:	2b00      	cmp	r3, #0
 800065c:	d06c      	beq.n	8000738 <HAL_RCC_OscConfig+0x12c>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d168      	bne.n	8000738 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000666:	2301      	movs	r3, #1
 8000668:	e24c      	b.n	8000b04 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000672:	d106      	bne.n	8000682 <HAL_RCC_OscConfig+0x76>
 8000674:	4b80      	ldr	r3, [pc, #512]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a7f      	ldr	r2, [pc, #508]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 800067a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	e02e      	b.n	80006e0 <HAL_RCC_OscConfig+0xd4>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d10c      	bne.n	80006a4 <HAL_RCC_OscConfig+0x98>
 800068a:	4b7b      	ldr	r3, [pc, #492]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a7a      	ldr	r2, [pc, #488]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 8000690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000694:	6013      	str	r3, [r2, #0]
 8000696:	4b78      	ldr	r3, [pc, #480]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a77      	ldr	r2, [pc, #476]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 800069c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006a0:	6013      	str	r3, [r2, #0]
 80006a2:	e01d      	b.n	80006e0 <HAL_RCC_OscConfig+0xd4>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80006ac:	d10c      	bne.n	80006c8 <HAL_RCC_OscConfig+0xbc>
 80006ae:	4b72      	ldr	r3, [pc, #456]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a71      	ldr	r2, [pc, #452]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 80006b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006b8:	6013      	str	r3, [r2, #0]
 80006ba:	4b6f      	ldr	r3, [pc, #444]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a6e      	ldr	r2, [pc, #440]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 80006c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006c4:	6013      	str	r3, [r2, #0]
 80006c6:	e00b      	b.n	80006e0 <HAL_RCC_OscConfig+0xd4>
 80006c8:	4b6b      	ldr	r3, [pc, #428]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a6a      	ldr	r2, [pc, #424]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 80006ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b68      	ldr	r3, [pc, #416]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a67      	ldr	r2, [pc, #412]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 80006da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d013      	beq.n	8000710 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80006e8:	f7ff fea2 	bl	8000430 <HAL_GetTick>
 80006ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006ee:	e008      	b.n	8000702 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80006f0:	f7ff fe9e 	bl	8000430 <HAL_GetTick>
 80006f4:	4602      	mov	r2, r0
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	2b64      	cmp	r3, #100	; 0x64
 80006fc:	d901      	bls.n	8000702 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80006fe:	2303      	movs	r3, #3
 8000700:	e200      	b.n	8000b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000702:	4b5d      	ldr	r3, [pc, #372]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d0f0      	beq.n	80006f0 <HAL_RCC_OscConfig+0xe4>
 800070e:	e014      	b.n	800073a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000710:	f7ff fe8e 	bl	8000430 <HAL_GetTick>
 8000714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000716:	e008      	b.n	800072a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000718:	f7ff fe8a 	bl	8000430 <HAL_GetTick>
 800071c:	4602      	mov	r2, r0
 800071e:	693b      	ldr	r3, [r7, #16]
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	2b64      	cmp	r3, #100	; 0x64
 8000724:	d901      	bls.n	800072a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000726:	2303      	movs	r3, #3
 8000728:	e1ec      	b.n	8000b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800072a:	4b53      	ldr	r3, [pc, #332]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000732:	2b00      	cmp	r3, #0
 8000734:	d1f0      	bne.n	8000718 <HAL_RCC_OscConfig+0x10c>
 8000736:	e000      	b.n	800073a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	2b00      	cmp	r3, #0
 8000744:	d063      	beq.n	800080e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000746:	4b4c      	ldr	r3, [pc, #304]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	f003 030c 	and.w	r3, r3, #12
 800074e:	2b00      	cmp	r3, #0
 8000750:	d00b      	beq.n	800076a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000752:	4b49      	ldr	r3, [pc, #292]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	f003 030c 	and.w	r3, r3, #12
 800075a:	2b08      	cmp	r3, #8
 800075c:	d11c      	bne.n	8000798 <HAL_RCC_OscConfig+0x18c>
 800075e:	4b46      	ldr	r3, [pc, #280]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000766:	2b00      	cmp	r3, #0
 8000768:	d116      	bne.n	8000798 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800076a:	4b43      	ldr	r3, [pc, #268]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	2b00      	cmp	r3, #0
 8000774:	d005      	beq.n	8000782 <HAL_RCC_OscConfig+0x176>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	691b      	ldr	r3, [r3, #16]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d001      	beq.n	8000782 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	e1c0      	b.n	8000b04 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000782:	4b3d      	ldr	r3, [pc, #244]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	00db      	lsls	r3, r3, #3
 8000790:	4939      	ldr	r1, [pc, #228]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 8000792:	4313      	orrs	r3, r2
 8000794:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000796:	e03a      	b.n	800080e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	691b      	ldr	r3, [r3, #16]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d020      	beq.n	80007e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80007a0:	4b36      	ldr	r3, [pc, #216]	; (800087c <HAL_RCC_OscConfig+0x270>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007a6:	f7ff fe43 	bl	8000430 <HAL_GetTick>
 80007aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80007ac:	e008      	b.n	80007c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80007ae:	f7ff fe3f 	bl	8000430 <HAL_GetTick>
 80007b2:	4602      	mov	r2, r0
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d901      	bls.n	80007c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80007bc:	2303      	movs	r3, #3
 80007be:	e1a1      	b.n	8000b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80007c0:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f003 0302 	and.w	r3, r3, #2
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d0f0      	beq.n	80007ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007cc:	4b2a      	ldr	r3, [pc, #168]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	695b      	ldr	r3, [r3, #20]
 80007d8:	00db      	lsls	r3, r3, #3
 80007da:	4927      	ldr	r1, [pc, #156]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 80007dc:	4313      	orrs	r3, r2
 80007de:	600b      	str	r3, [r1, #0]
 80007e0:	e015      	b.n	800080e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80007e2:	4b26      	ldr	r3, [pc, #152]	; (800087c <HAL_RCC_OscConfig+0x270>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007e8:	f7ff fe22 	bl	8000430 <HAL_GetTick>
 80007ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007ee:	e008      	b.n	8000802 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80007f0:	f7ff fe1e 	bl	8000430 <HAL_GetTick>
 80007f4:	4602      	mov	r2, r0
 80007f6:	693b      	ldr	r3, [r7, #16]
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d901      	bls.n	8000802 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80007fe:	2303      	movs	r3, #3
 8000800:	e180      	b.n	8000b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000802:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	2b00      	cmp	r3, #0
 800080c:	d1f0      	bne.n	80007f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f003 0308 	and.w	r3, r3, #8
 8000816:	2b00      	cmp	r3, #0
 8000818:	d03a      	beq.n	8000890 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d019      	beq.n	8000856 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <HAL_RCC_OscConfig+0x274>)
 8000824:	2201      	movs	r2, #1
 8000826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000828:	f7ff fe02 	bl	8000430 <HAL_GetTick>
 800082c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800082e:	e008      	b.n	8000842 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000830:	f7ff fdfe 	bl	8000430 <HAL_GetTick>
 8000834:	4602      	mov	r2, r0
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	2b02      	cmp	r3, #2
 800083c:	d901      	bls.n	8000842 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800083e:	2303      	movs	r3, #3
 8000840:	e160      	b.n	8000b04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 8000844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	2b00      	cmp	r3, #0
 800084c:	d0f0      	beq.n	8000830 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800084e:	2001      	movs	r0, #1
 8000850:	f000 faa6 	bl	8000da0 <RCC_Delay>
 8000854:	e01c      	b.n	8000890 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <HAL_RCC_OscConfig+0x274>)
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800085c:	f7ff fde8 	bl	8000430 <HAL_GetTick>
 8000860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000862:	e00f      	b.n	8000884 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000864:	f7ff fde4 	bl	8000430 <HAL_GetTick>
 8000868:	4602      	mov	r2, r0
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	2b02      	cmp	r3, #2
 8000870:	d908      	bls.n	8000884 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000872:	2303      	movs	r3, #3
 8000874:	e146      	b.n	8000b04 <HAL_RCC_OscConfig+0x4f8>
 8000876:	bf00      	nop
 8000878:	40021000 	.word	0x40021000
 800087c:	42420000 	.word	0x42420000
 8000880:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000884:	4b92      	ldr	r3, [pc, #584]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 8000886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000888:	f003 0302 	and.w	r3, r3, #2
 800088c:	2b00      	cmp	r3, #0
 800088e:	d1e9      	bne.n	8000864 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f003 0304 	and.w	r3, r3, #4
 8000898:	2b00      	cmp	r3, #0
 800089a:	f000 80a6 	beq.w	80009ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800089e:	2300      	movs	r3, #0
 80008a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80008a2:	4b8b      	ldr	r3, [pc, #556]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d10d      	bne.n	80008ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	4b88      	ldr	r3, [pc, #544]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	4a87      	ldr	r2, [pc, #540]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b8:	61d3      	str	r3, [r2, #28]
 80008ba:	4b85      	ldr	r3, [pc, #532]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80008c6:	2301      	movs	r3, #1
 80008c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008ca:	4b82      	ldr	r3, [pc, #520]	; (8000ad4 <HAL_RCC_OscConfig+0x4c8>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d118      	bne.n	8000908 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80008d6:	4b7f      	ldr	r3, [pc, #508]	; (8000ad4 <HAL_RCC_OscConfig+0x4c8>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a7e      	ldr	r2, [pc, #504]	; (8000ad4 <HAL_RCC_OscConfig+0x4c8>)
 80008dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80008e2:	f7ff fda5 	bl	8000430 <HAL_GetTick>
 80008e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008e8:	e008      	b.n	80008fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80008ea:	f7ff fda1 	bl	8000430 <HAL_GetTick>
 80008ee:	4602      	mov	r2, r0
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	1ad3      	subs	r3, r2, r3
 80008f4:	2b64      	cmp	r3, #100	; 0x64
 80008f6:	d901      	bls.n	80008fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80008f8:	2303      	movs	r3, #3
 80008fa:	e103      	b.n	8000b04 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008fc:	4b75      	ldr	r3, [pc, #468]	; (8000ad4 <HAL_RCC_OscConfig+0x4c8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000904:	2b00      	cmp	r3, #0
 8000906:	d0f0      	beq.n	80008ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d106      	bne.n	800091e <HAL_RCC_OscConfig+0x312>
 8000910:	4b6f      	ldr	r3, [pc, #444]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 8000912:	6a1b      	ldr	r3, [r3, #32]
 8000914:	4a6e      	ldr	r2, [pc, #440]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	6213      	str	r3, [r2, #32]
 800091c:	e02d      	b.n	800097a <HAL_RCC_OscConfig+0x36e>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	68db      	ldr	r3, [r3, #12]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d10c      	bne.n	8000940 <HAL_RCC_OscConfig+0x334>
 8000926:	4b6a      	ldr	r3, [pc, #424]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 8000928:	6a1b      	ldr	r3, [r3, #32]
 800092a:	4a69      	ldr	r2, [pc, #420]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 800092c:	f023 0301 	bic.w	r3, r3, #1
 8000930:	6213      	str	r3, [r2, #32]
 8000932:	4b67      	ldr	r3, [pc, #412]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 8000934:	6a1b      	ldr	r3, [r3, #32]
 8000936:	4a66      	ldr	r2, [pc, #408]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 8000938:	f023 0304 	bic.w	r3, r3, #4
 800093c:	6213      	str	r3, [r2, #32]
 800093e:	e01c      	b.n	800097a <HAL_RCC_OscConfig+0x36e>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	2b05      	cmp	r3, #5
 8000946:	d10c      	bne.n	8000962 <HAL_RCC_OscConfig+0x356>
 8000948:	4b61      	ldr	r3, [pc, #388]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 800094a:	6a1b      	ldr	r3, [r3, #32]
 800094c:	4a60      	ldr	r2, [pc, #384]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 800094e:	f043 0304 	orr.w	r3, r3, #4
 8000952:	6213      	str	r3, [r2, #32]
 8000954:	4b5e      	ldr	r3, [pc, #376]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 8000956:	6a1b      	ldr	r3, [r3, #32]
 8000958:	4a5d      	ldr	r2, [pc, #372]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	6213      	str	r3, [r2, #32]
 8000960:	e00b      	b.n	800097a <HAL_RCC_OscConfig+0x36e>
 8000962:	4b5b      	ldr	r3, [pc, #364]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 8000964:	6a1b      	ldr	r3, [r3, #32]
 8000966:	4a5a      	ldr	r2, [pc, #360]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 8000968:	f023 0301 	bic.w	r3, r3, #1
 800096c:	6213      	str	r3, [r2, #32]
 800096e:	4b58      	ldr	r3, [pc, #352]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 8000970:	6a1b      	ldr	r3, [r3, #32]
 8000972:	4a57      	ldr	r2, [pc, #348]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 8000974:	f023 0304 	bic.w	r3, r3, #4
 8000978:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	68db      	ldr	r3, [r3, #12]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d015      	beq.n	80009ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000982:	f7ff fd55 	bl	8000430 <HAL_GetTick>
 8000986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000988:	e00a      	b.n	80009a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800098a:	f7ff fd51 	bl	8000430 <HAL_GetTick>
 800098e:	4602      	mov	r2, r0
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	f241 3288 	movw	r2, #5000	; 0x1388
 8000998:	4293      	cmp	r3, r2
 800099a:	d901      	bls.n	80009a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800099c:	2303      	movs	r3, #3
 800099e:	e0b1      	b.n	8000b04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009a0:	4b4b      	ldr	r3, [pc, #300]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 80009a2:	6a1b      	ldr	r3, [r3, #32]
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d0ee      	beq.n	800098a <HAL_RCC_OscConfig+0x37e>
 80009ac:	e014      	b.n	80009d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009ae:	f7ff fd3f 	bl	8000430 <HAL_GetTick>
 80009b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009b4:	e00a      	b.n	80009cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80009b6:	f7ff fd3b 	bl	8000430 <HAL_GetTick>
 80009ba:	4602      	mov	r2, r0
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	1ad3      	subs	r3, r2, r3
 80009c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d901      	bls.n	80009cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80009c8:	2303      	movs	r3, #3
 80009ca:	e09b      	b.n	8000b04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009cc:	4b40      	ldr	r3, [pc, #256]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 80009ce:	6a1b      	ldr	r3, [r3, #32]
 80009d0:	f003 0302 	and.w	r3, r3, #2
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d1ee      	bne.n	80009b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80009d8:	7dfb      	ldrb	r3, [r7, #23]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d105      	bne.n	80009ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80009de:	4b3c      	ldr	r3, [pc, #240]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	4a3b      	ldr	r2, [pc, #236]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 80009e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 8087 	beq.w	8000b02 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009f4:	4b36      	ldr	r3, [pc, #216]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f003 030c 	and.w	r3, r3, #12
 80009fc:	2b08      	cmp	r3, #8
 80009fe:	d061      	beq.n	8000ac4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	69db      	ldr	r3, [r3, #28]
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d146      	bne.n	8000a96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a08:	4b33      	ldr	r3, [pc, #204]	; (8000ad8 <HAL_RCC_OscConfig+0x4cc>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a0e:	f7ff fd0f 	bl	8000430 <HAL_GetTick>
 8000a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a14:	e008      	b.n	8000a28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a16:	f7ff fd0b 	bl	8000430 <HAL_GetTick>
 8000a1a:	4602      	mov	r2, r0
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d901      	bls.n	8000a28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000a24:	2303      	movs	r3, #3
 8000a26:	e06d      	b.n	8000b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a28:	4b29      	ldr	r3, [pc, #164]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d1f0      	bne.n	8000a16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6a1b      	ldr	r3, [r3, #32]
 8000a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a3c:	d108      	bne.n	8000a50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000a3e:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	4921      	ldr	r1, [pc, #132]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a50:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6a19      	ldr	r1, [r3, #32]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a60:	430b      	orrs	r3, r1
 8000a62:	491b      	ldr	r1, [pc, #108]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 8000a64:	4313      	orrs	r3, r2
 8000a66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <HAL_RCC_OscConfig+0x4cc>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a6e:	f7ff fcdf 	bl	8000430 <HAL_GetTick>
 8000a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a74:	e008      	b.n	8000a88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a76:	f7ff fcdb 	bl	8000430 <HAL_GetTick>
 8000a7a:	4602      	mov	r2, r0
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d901      	bls.n	8000a88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000a84:	2303      	movs	r3, #3
 8000a86:	e03d      	b.n	8000b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d0f0      	beq.n	8000a76 <HAL_RCC_OscConfig+0x46a>
 8000a94:	e035      	b.n	8000b02 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <HAL_RCC_OscConfig+0x4cc>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a9c:	f7ff fcc8 	bl	8000430 <HAL_GetTick>
 8000aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000aa2:	e008      	b.n	8000ab6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000aa4:	f7ff fcc4 	bl	8000430 <HAL_GetTick>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	d901      	bls.n	8000ab6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	e026      	b.n	8000b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_RCC_OscConfig+0x4c4>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d1f0      	bne.n	8000aa4 <HAL_RCC_OscConfig+0x498>
 8000ac2:	e01e      	b.n	8000b02 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	69db      	ldr	r3, [r3, #28]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d107      	bne.n	8000adc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000acc:	2301      	movs	r3, #1
 8000ace:	e019      	b.n	8000b04 <HAL_RCC_OscConfig+0x4f8>
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40007000 	.word	0x40007000
 8000ad8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000adc:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <HAL_RCC_OscConfig+0x500>)
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6a1b      	ldr	r3, [r3, #32]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d106      	bne.n	8000afe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d001      	beq.n	8000b02 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e000      	b.n	8000b04 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000b02:	2300      	movs	r3, #0
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40021000 	.word	0x40021000

08000b10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d101      	bne.n	8000b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000b20:	2301      	movs	r3, #1
 8000b22:	e0d0      	b.n	8000cc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000b24:	4b6a      	ldr	r3, [pc, #424]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f003 0307 	and.w	r3, r3, #7
 8000b2c:	683a      	ldr	r2, [r7, #0]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d910      	bls.n	8000b54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b32:	4b67      	ldr	r3, [pc, #412]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f023 0207 	bic.w	r2, r3, #7
 8000b3a:	4965      	ldr	r1, [pc, #404]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b42:	4b63      	ldr	r3, [pc, #396]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	683a      	ldr	r2, [r7, #0]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d001      	beq.n	8000b54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	e0b8      	b.n	8000cc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f003 0302 	and.w	r3, r3, #2
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d020      	beq.n	8000ba2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d005      	beq.n	8000b78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000b6c:	4b59      	ldr	r3, [pc, #356]	; (8000cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	4a58      	ldr	r2, [pc, #352]	; (8000cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000b72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000b76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f003 0308 	and.w	r3, r3, #8
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d005      	beq.n	8000b90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000b84:	4b53      	ldr	r3, [pc, #332]	; (8000cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	4a52      	ldr	r2, [pc, #328]	; (8000cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000b8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000b8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b90:	4b50      	ldr	r3, [pc, #320]	; (8000cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	494d      	ldr	r1, [pc, #308]	; (8000cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d040      	beq.n	8000c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d107      	bne.n	8000bc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb6:	4b47      	ldr	r3, [pc, #284]	; (8000cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d115      	bne.n	8000bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e07f      	b.n	8000cc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d107      	bne.n	8000bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bce:	4b41      	ldr	r3, [pc, #260]	; (8000cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d109      	bne.n	8000bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e073      	b.n	8000cc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bde:	4b3d      	ldr	r3, [pc, #244]	; (8000cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e06b      	b.n	8000cc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bee:	4b39      	ldr	r3, [pc, #228]	; (8000cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f023 0203 	bic.w	r2, r3, #3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	4936      	ldr	r1, [pc, #216]	; (8000cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000c00:	f7ff fc16 	bl	8000430 <HAL_GetTick>
 8000c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c06:	e00a      	b.n	8000c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c08:	f7ff fc12 	bl	8000430 <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d901      	bls.n	8000c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e053      	b.n	8000cc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c1e:	4b2d      	ldr	r3, [pc, #180]	; (8000cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f003 020c 	and.w	r2, r3, #12
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d1eb      	bne.n	8000c08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000c30:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f003 0307 	and.w	r3, r3, #7
 8000c38:	683a      	ldr	r2, [r7, #0]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d210      	bcs.n	8000c60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c3e:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f023 0207 	bic.w	r2, r3, #7
 8000c46:	4922      	ldr	r1, [pc, #136]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c4e:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	683a      	ldr	r2, [r7, #0]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d001      	beq.n	8000c60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e032      	b.n	8000cc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f003 0304 	and.w	r3, r3, #4
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d008      	beq.n	8000c7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	4916      	ldr	r1, [pc, #88]	; (8000cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 0308 	and.w	r3, r3, #8
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d009      	beq.n	8000c9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	691b      	ldr	r3, [r3, #16]
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	490e      	ldr	r1, [pc, #56]	; (8000cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000c9e:	f000 f821 	bl	8000ce4 <HAL_RCC_GetSysClockFreq>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	091b      	lsrs	r3, r3, #4
 8000caa:	f003 030f 	and.w	r3, r3, #15
 8000cae:	490a      	ldr	r1, [pc, #40]	; (8000cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8000cb0:	5ccb      	ldrb	r3, [r1, r3]
 8000cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb6:	4a09      	ldr	r2, [pc, #36]	; (8000cdc <HAL_RCC_ClockConfig+0x1cc>)
 8000cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_RCC_ClockConfig+0x1d0>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fb74 	bl	80003ac <HAL_InitTick>

  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40022000 	.word	0x40022000
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	08000e74 	.word	0x08000e74
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	20000004 	.word	0x20000004

08000ce4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ce4:	b490      	push	{r4, r7}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000cea:	4b29      	ldr	r3, [pc, #164]	; (8000d90 <HAL_RCC_GetSysClockFreq+0xac>)
 8000cec:	1d3c      	adds	r4, r7, #4
 8000cee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000cf4:	f240 2301 	movw	r3, #513	; 0x201
 8000cf8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000d0e:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f003 030c 	and.w	r3, r3, #12
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	d002      	beq.n	8000d24 <HAL_RCC_GetSysClockFreq+0x40>
 8000d1e:	2b08      	cmp	r3, #8
 8000d20:	d003      	beq.n	8000d2a <HAL_RCC_GetSysClockFreq+0x46>
 8000d22:	e02b      	b.n	8000d7c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000d24:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000d26:	623b      	str	r3, [r7, #32]
      break;
 8000d28:	e02b      	b.n	8000d82 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	0c9b      	lsrs	r3, r3, #18
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	3328      	adds	r3, #40	; 0x28
 8000d34:	443b      	add	r3, r7
 8000d36:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000d3a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d012      	beq.n	8000d6c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	0c5b      	lsrs	r3, r3, #17
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	3328      	adds	r3, #40	; 0x28
 8000d52:	443b      	add	r3, r7
 8000d54:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000d58:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000d5e:	fb03 f202 	mul.w	r2, r3, r2
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
 8000d6a:	e004      	b.n	8000d76 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8000d70:	fb02 f303 	mul.w	r3, r2, r3
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d78:	623b      	str	r3, [r7, #32]
      break;
 8000d7a:	e002      	b.n	8000d82 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000d7e:	623b      	str	r3, [r7, #32]
      break;
 8000d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000d82:	6a3b      	ldr	r3, [r7, #32]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3728      	adds	r7, #40	; 0x28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc90      	pop	{r4, r7}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	08000e64 	.word	0x08000e64
 8000d94:	40021000 	.word	0x40021000
 8000d98:	007a1200 	.word	0x007a1200
 8000d9c:	003d0900 	.word	0x003d0900

08000da0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <RCC_Delay+0x34>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <RCC_Delay+0x38>)
 8000dae:	fba2 2303 	umull	r2, r3, r2, r3
 8000db2:	0a5b      	lsrs	r3, r3, #9
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	fb02 f303 	mul.w	r3, r2, r3
 8000dba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000dbc:	bf00      	nop
  }
  while (Delay --);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	1e5a      	subs	r2, r3, #1
 8000dc2:	60fa      	str	r2, [r7, #12]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1f9      	bne.n	8000dbc <RCC_Delay+0x1c>
}
 8000dc8:	bf00      	nop
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	10624dd3 	.word	0x10624dd3

08000ddc <main>:
 */

#include "main.h"

int main(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	hwInit();
 8000de0:	f7ff fac7 	bl	8000372 <hwInit>
	apInit();
 8000de4:	f7ff f9c4 	bl	8000170 <apInit>

	apMain();
 8000de8:	f7ff f9c8 	bl	800017c <apMain>
	return 0;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <__libc_init_array>:
 8000df4:	b570      	push	{r4, r5, r6, lr}
 8000df6:	2600      	movs	r6, #0
 8000df8:	4d0c      	ldr	r5, [pc, #48]	; (8000e2c <__libc_init_array+0x38>)
 8000dfa:	4c0d      	ldr	r4, [pc, #52]	; (8000e30 <__libc_init_array+0x3c>)
 8000dfc:	1b64      	subs	r4, r4, r5
 8000dfe:	10a4      	asrs	r4, r4, #2
 8000e00:	42a6      	cmp	r6, r4
 8000e02:	d109      	bne.n	8000e18 <__libc_init_array+0x24>
 8000e04:	f000 f822 	bl	8000e4c <_init>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	4d0a      	ldr	r5, [pc, #40]	; (8000e34 <__libc_init_array+0x40>)
 8000e0c:	4c0a      	ldr	r4, [pc, #40]	; (8000e38 <__libc_init_array+0x44>)
 8000e0e:	1b64      	subs	r4, r4, r5
 8000e10:	10a4      	asrs	r4, r4, #2
 8000e12:	42a6      	cmp	r6, r4
 8000e14:	d105      	bne.n	8000e22 <__libc_init_array+0x2e>
 8000e16:	bd70      	pop	{r4, r5, r6, pc}
 8000e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e1c:	4798      	blx	r3
 8000e1e:	3601      	adds	r6, #1
 8000e20:	e7ee      	b.n	8000e00 <__libc_init_array+0xc>
 8000e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e26:	4798      	blx	r3
 8000e28:	3601      	adds	r6, #1
 8000e2a:	e7f2      	b.n	8000e12 <__libc_init_array+0x1e>
 8000e2c:	08000e84 	.word	0x08000e84
 8000e30:	08000e84 	.word	0x08000e84
 8000e34:	08000e84 	.word	0x08000e84
 8000e38:	08000e88 	.word	0x08000e88

08000e3c <memset>:
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	4402      	add	r2, r0
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d100      	bne.n	8000e46 <memset+0xa>
 8000e44:	4770      	bx	lr
 8000e46:	f803 1b01 	strb.w	r1, [r3], #1
 8000e4a:	e7f9      	b.n	8000e40 <memset+0x4>

08000e4c <_init>:
 8000e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e4e:	bf00      	nop
 8000e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e52:	bc08      	pop	{r3}
 8000e54:	469e      	mov	lr, r3
 8000e56:	4770      	bx	lr

08000e58 <_fini>:
 8000e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e5a:	bf00      	nop
 8000e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e5e:	bc08      	pop	{r3}
 8000e60:	469e      	mov	lr, r3
 8000e62:	4770      	bx	lr
